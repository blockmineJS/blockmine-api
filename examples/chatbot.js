/**
 * –ü—Ä–∏–º–µ—Ä —á–∞—Ç-–±–æ—Ç–∞ —Å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
 */
const BlockMindBot = require('../src/index');

const bot = new BlockMindBot({
    url: 'http://localhost:3001',
    botId: 1,
    apiKey: 'bk_your_api_key_here'
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = {
    messagesReceived: 0,
    commandsProcessed: 0,
    playersJoined: 0,
};

async function main() {
    try {
        await bot.connect();
        console.log('‚úì –ß–∞—Ç-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n');

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Ç–µ
        bot.onChatMessage(async (data) => {
            stats.messagesReceived++;
            const message = data.message;
            const username = data.username;

            console.log(`[–ß–ê–¢] ${username}: ${message}`);

            // –ö–æ–º–∞–Ω–¥—ã
            if (message.startsWith('!')) {
                stats.commandsProcessed++;
                await handleCommand(message, username);
            }
        });

        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        bot.onPlayerJoin(async (username) => {
            stats.playersJoined++;
            console.log(`[+] ${username} –∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);

            await bot.sendMessage(
                `–ü—Ä–∏–≤–µ—Ç, ${username}! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä!`
            );

            // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–æ –∫–æ–º–∞–Ω–¥—ã
            setTimeout(async () => {
                await bot.sendMessage(
                    `${username}, –∏—Å–ø–æ–ª—å–∑—É–π !help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥`,
                    'private',
                    username
                );
            }, 2000);
        });

        bot.onPlayerLeave((username) => {
            console.log(`[-] ${username} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä`);
        });

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
        bot.onHealthUpdate((data) => {
            if (data.health < 5) {
                console.log('‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ!');
            }
        });

        bot.onDeath(async () => {
            await bot.sendMessage('–£–ø—Å... –Ø —É–º–µ—Ä üíÄ');
        });

        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤:');
        console.log('  !help - –ü–æ–º–æ—â—å');
        console.log('  !status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞');
        console.log('  !rules - –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        console.log('  !time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è');
        console.log('  !stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞');
        console.log('  !ping - –ü–æ–Ω–≥!\n');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error.message);
        bot.disconnect();
        process.exit(1);
    }
}

async function handleCommand(message, username) {
    const command = message.toLowerCase().split(' ')[0];

    try {
        switch (command) {
            case '!help':
                await bot.sendMessage(
                    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: !help, !status, !rules, !time, !stats, !ping'
                );
                break;

            case '!status':
                const isOnline = await bot.getStatus();
                await bot.sendMessage(
                    `–ë–æ—Ç ${isOnline ? '–æ–Ω–ª–∞–π–Ω ‚úÖ' : '–æ—Ñ–ª–∞–π–Ω ‚ùå'}`
                );
                break;

            case '!rules':
                await bot.sendMessage('–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞:');
                await bot.sendMessage('1. –ù–µ –≥—Ä–∏—Ñ–µ—Ä–∏—Ç—å');
                await bot.sendMessage('2. –£–≤–∞–∂–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤');
                await bot.sendMessage('3. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Ç—ã');
                break;

            case '!time':
                const now = new Date();
                await bot.sendMessage(
                    `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toLocaleTimeString('ru-RU')}`
                );
                break;

            case '!stats':
                await bot.sendMessage(
                    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–π: ${stats.messagesReceived}, ` +
                    `–ö–æ–º–∞–Ω–¥: ${stats.commandsProcessed}, ` +
                    `–ò–≥—Ä–æ–∫–æ–≤ –∑–∞—à–ª–æ: ${stats.playersJoined}`
                );
                break;

            case '!ping':
                await bot.sendMessage(`–ü–æ–Ω–≥! üèì`);
                break;

            case '!user':
                // –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                try {
                    const user = await bot.getUser(username);
                    await bot.sendMessage(
                        `${username}: –ì—Ä—É–ø–ø—ã: [${user.groups.join(', ') || '–Ω–µ—Ç'}], ` +
                        `–ü—Ä–∞–≤–∞: ${user.permissions.length}`,
                        'private',
                        username
                    );
                } catch (error) {
                    await bot.sendMessage(
                        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                        'private',
                        username
                    );
                }
                break;

            default:
                await bot.sendMessage(
                    `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π !help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥`,
                    'private',
                    username
                );
        }

        console.log(`  ‚Üí –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ${command} –æ—Ç ${username}`);

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${command}:`, error.message);
        await bot.sendMessage(
            `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}`,
            'private',
            username
        );
    }
}

process.on('SIGINT', () => {
    console.log('\n\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.messagesReceived}`);
    console.log(`  –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.commandsProcessed}`);
    console.log(`  –ò–≥—Ä–æ–∫–æ–≤ –∑–∞—à–ª–æ: ${stats.playersJoined}`);
    console.log('\n–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
    bot.disconnect();
    process.exit(0);
});

main();
