/**
 * –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Å—ã—Ä—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç Minecraft
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É JSON –æ–±—ä–µ–∫—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π
 */
const BlockMindBot = require('../src/index');

const bot = new BlockMindBot({
    url: 'http://localhost:3001',
    botId: 1,
    apiKey: 'bk_your_api_key_here'
});

async function main() {
    try {
        await bot.connect();
        console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–æ—Ç—É\n');

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º JSON
        bot.onRawMessage((data) => {
            console.log('‚îÄ'.repeat(60));
            console.log('üì® –ù–æ–≤–æ–µ —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
            console.log('–¢–µ–∫—Å—Ç:', data.raw_message);
            console.log('\nJSON –æ–±—ä–µ–∫—Ç:');
            console.log(JSON.stringify(data.json, null, 2));

            // –î–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            if (data.json.extra) {
                console.log('\nüé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏:');
                data.json.extra.forEach((part, index) => {
                    console.log(`  ${index + 1}. "${part.text}"`);
                    if (part.color) console.log(`     –¶–≤–µ—Ç: ${part.color}`);
                    if (part.bold) console.log(`     –ñ–∏—Ä–Ω—ã–π: –¥–∞`);
                    if (part.italic) console.log(`     –ö—É—Ä—Å–∏–≤: –¥–∞`);
                    if (part.clickEvent) {
                        console.log(`     –ö–ª–∏–∫: ${part.clickEvent.action} -> ${part.clickEvent.value}`);
                    }
                    if (part.hoverEvent) {
                        console.log(`     Hover: ${part.hoverEvent.action}`);
                    }
                });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            if (data.json.translate) {
                console.log(`\nüåê –¢–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞: ${data.json.translate}`);
                if (data.json.with) {
                    console.log(`üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`, data.json.with);
                }
            }

            console.log('‚îÄ'.repeat(60) + '\n');
        });

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
        bot.onRawMessage((data) => {
            const json = data.json;

            // –°–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ—Ä—Ç–∏
            if (json.translate && json.translate.startsWith('death.')) {
                console.log('üíÄ [–°–ú–ï–†–¢–¨]', data.raw_message);
            }

            // –°–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
            if (json.translate && json.translate.includes('advancement')) {
                console.log('üèÜ [–î–û–°–¢–ò–ñ–ï–ù–ò–ï]', data.raw_message);
            }

            // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (json.translate && json.translate.startsWith('chat.type.')) {
                console.log('üì¢ [–°–ò–°–¢–ï–ú–ê]', data.raw_message);
            }
        });

        // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)
        bot.onChatMessage((data) => {
            console.log(`üí¨ [${data.type}] ${data.username}: ${data.message}`);
        });

        console.log('–°–ª—É—à–∞–µ–º —Å—ã—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
        console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞\n');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error.message);
        bot.disconnect();
        process.exit(1);
    }
}

process.on('SIGINT', () => {
    console.log('\n\n–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
    bot.disconnect();
    process.exit(0);
});

main();
